{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"myNotes This is a website for my personal notes.","title":"myNotes"},{"location":"#mynotes","text":"This is a website for my personal notes.","title":"myNotes"},{"location":"docker/","text":"Docker Docker is used for containerizing software in to self contained containers. These containers have all the instructions needed to run the software including what is essentially a virtual machine. This means the software should run on any machine. What is a Docker Image? A docker image contains all the information needed to run your software including but not excluded to source code, assets, and data. In order to build a docker image, we need a dockerfile which contains instructions on how to set up the environment to run your code and how to your program. Docker images are built using the docker build command. What is a Docker Container? A docker container is a standalone package of software that is built from a docker image. Containers contain everything needed to run the software including the source code, packages, and the a lightweight virtual machine. Docker containers can be created using the docker create command. Starting Docker in Ubuntu Command Description sudo service --status-all List the status of all programs running on Ubuntu. sudo service docker start Start Docker. sudo docker run hello-world Use this to make sure that docker is installed correctly. Dockerizing a Python Project Suppose we have the following simple python project with the following file structure. myproject | +-- main.py +-- dockerfile The file main.py contains the following code. # main.py print(\"Hello, World!\") The dockerfile contains the following code. # syntax=docker/dockerfile:1 FROM python:3.8-slim-buster WORKDIR /app COPY main.py main.py CMD [\"python3\", \"main.py\"] The commands in the dockerfile are exectuded line by line. The first command FROM python:3.8-slim-buster creates a python image that contains everything needed to run Python. The command WORKDIR /app creates a directory called app app . All commands run after this are then relative to the directory app . The command COPY main.py main.py copies main.py into the image. The first parameter is the file to be copied and the second parameter is the location where the file will be stored in the image. The final command CMD [\"python3\", \"main.py\"] is the command needed to run our app. In this example, our app simply prints Hello, World to the terminal. To build the docker image, navigate into the myproject/ directory and run the following command. sudo docker build --tag myproject . This creates a docker image called myproject . You can list the docker images on your computer using the following command. $ docker images ls REPOSITORY TAG IMAGE ID CREATED SIZE myproject latest 069f749d5bd1 5 minutes ago 114MB To run the python image as a container, use the following command. $ sudo docker run python-docker Hello, World! Success!","title":"Docker"},{"location":"docker/#docker","text":"Docker is used for containerizing software in to self contained containers. These containers have all the instructions needed to run the software including what is essentially a virtual machine. This means the software should run on any machine.","title":"Docker"},{"location":"docker/#what-is-a-docker-image","text":"A docker image contains all the information needed to run your software including but not excluded to source code, assets, and data. In order to build a docker image, we need a dockerfile which contains instructions on how to set up the environment to run your code and how to your program. Docker images are built using the docker build command.","title":"What is a Docker Image?"},{"location":"docker/#what-is-a-docker-container","text":"A docker container is a standalone package of software that is built from a docker image. Containers contain everything needed to run the software including the source code, packages, and the a lightweight virtual machine. Docker containers can be created using the docker create command.","title":"What is a Docker Container?"},{"location":"docker/#starting-docker-in-ubuntu","text":"Command Description sudo service --status-all List the status of all programs running on Ubuntu. sudo service docker start Start Docker. sudo docker run hello-world Use this to make sure that docker is installed correctly.","title":"Starting Docker in Ubuntu"},{"location":"docker/#dockerizing-a-python-project","text":"Suppose we have the following simple python project with the following file structure. myproject | +-- main.py +-- dockerfile The file main.py contains the following code. # main.py print(\"Hello, World!\") The dockerfile contains the following code. # syntax=docker/dockerfile:1 FROM python:3.8-slim-buster WORKDIR /app COPY main.py main.py CMD [\"python3\", \"main.py\"] The commands in the dockerfile are exectuded line by line. The first command FROM python:3.8-slim-buster creates a python image that contains everything needed to run Python. The command WORKDIR /app creates a directory called app app . All commands run after this are then relative to the directory app . The command COPY main.py main.py copies main.py into the image. The first parameter is the file to be copied and the second parameter is the location where the file will be stored in the image. The final command CMD [\"python3\", \"main.py\"] is the command needed to run our app. In this example, our app simply prints Hello, World to the terminal. To build the docker image, navigate into the myproject/ directory and run the following command. sudo docker build --tag myproject . This creates a docker image called myproject . You can list the docker images on your computer using the following command. $ docker images ls REPOSITORY TAG IMAGE ID CREATED SIZE myproject latest 069f749d5bd1 5 minutes ago 114MB To run the python image as a container, use the following command. $ sudo docker run python-docker Hello, World! Success!","title":"Dockerizing a Python Project"},{"location":"poetry_overview/","text":"Poetry Poetry is a package manager for Python that supports virtual environments. Poetry encourages creating one virtual environment for each project. The depencencies and requirements are then stored within the project directory in the poetry.lock and pyproject.toml files. Initialising a Poetry Environment A new poetry can be initialised in an existing directory by first navigating to the directory then using the poetry init function. cd project-directory poetry init This will create poetry.lock and pyproject.toml files in the directory. Installing Packages Poetry packages are install using the poetry add function. For example. $ poetry add package-name Packages are installed to poetries cache directory. The directory path can be found using the poetry env info --path function. Removing Packages To remove a package, use the following function: $ poetry remove package-name Removing a Virtual Environment Poetry environments can be removed from within the project directory using the following comman: $ poetry env remove <environmentname> Note that the poetry virtual environment name is usually not the name of the project or project directory. To find the name of the virtual environment use the poetry env info --path function. This will give you the path to the virtual environment. The final directory in the path is the virtual environment name. Working with Multiple Python Versions (Windows) One major difference between poetry and conda is that conda allows you to choose and install a specific version of python when you create a new conda environment. When you install poetry, it is (usually) assosciated with the default version of Python on your machine. So, when you create a new poetry virtual environment it will be assosciated with your default version of python unless specified otherwise. If you want to change which version of Python is used for your virtual environment, use the following function. $ poetry env use path\\to\\python\\python.exe","title":"Poetry"},{"location":"poetry_overview/#poetry","text":"Poetry is a package manager for Python that supports virtual environments. Poetry encourages creating one virtual environment for each project. The depencencies and requirements are then stored within the project directory in the poetry.lock and pyproject.toml files.","title":"Poetry"},{"location":"poetry_overview/#initialising-a-poetry-environment","text":"A new poetry can be initialised in an existing directory by first navigating to the directory then using the poetry init function. cd project-directory poetry init This will create poetry.lock and pyproject.toml files in the directory.","title":"Initialising a Poetry Environment"},{"location":"poetry_overview/#installing-packages","text":"Poetry packages are install using the poetry add function. For example. $ poetry add package-name Packages are installed to poetries cache directory. The directory path can be found using the poetry env info --path function.","title":"Installing Packages"},{"location":"poetry_overview/#removing-packages","text":"To remove a package, use the following function: $ poetry remove package-name","title":"Removing Packages"},{"location":"poetry_overview/#removing-a-virtual-environment","text":"Poetry environments can be removed from within the project directory using the following comman: $ poetry env remove <environmentname> Note that the poetry virtual environment name is usually not the name of the project or project directory. To find the name of the virtual environment use the poetry env info --path function. This will give you the path to the virtual environment. The final directory in the path is the virtual environment name.","title":"Removing a Virtual Environment"},{"location":"poetry_overview/#working-with-multiple-python-versions-windows","text":"One major difference between poetry and conda is that conda allows you to choose and install a specific version of python when you create a new conda environment. When you install poetry, it is (usually) assosciated with the default version of Python on your machine. So, when you create a new poetry virtual environment it will be assosciated with your default version of python unless specified otherwise. If you want to change which version of Python is used for your virtual environment, use the following function. $ poetry env use path\\to\\python\\python.exe","title":"Working with Multiple Python Versions (Windows)"}]}