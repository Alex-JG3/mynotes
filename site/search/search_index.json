{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"myNotes This is a website for my personal notes.","title":"myNotes"},{"location":"#mynotes","text":"This is a website for my personal notes.","title":"myNotes"},{"location":"poetry_overview/","text":"Poetry Poetry is a package manager for Python that supports virtual environments. Poetry encourages creating one virtual environment for each project. The depencencies and requirements are then stored within the project directory in the poetry.lock and pyproject.toml files. Initialising a Poetry Environment A new poetry can be initialised in an existing directory by first navigating to the directory then using the poetry init function. cd project-directory poetry init This will create poetry.lock and pyproject.toml files in the directory. Installing Packages Poetry packages are install using the poetry add function. For example. $ poetry add package-name Packages are installed to poetries cache directory. The directory path can be found using the poetry env info --path function. Removing Packages To remove a package, use the following function: $ poetry remove package-name Removing a Virtual Environment Poetry environments can be removed from within the project directory using the following comman: $ poetry env remove <environmentname> Note that the poetry virtual environment name is usually not the name of the project or project directory. To find the name of the virtual environment use the poetry env info --path function. This will give you the path to the virtual environment. The final directory in the path is the virtual environment name.","title":"Poetry"},{"location":"poetry_overview/#poetry","text":"Poetry is a package manager for Python that supports virtual environments. Poetry encourages creating one virtual environment for each project. The depencencies and requirements are then stored within the project directory in the poetry.lock and pyproject.toml files.","title":"Poetry"},{"location":"poetry_overview/#initialising-a-poetry-environment","text":"A new poetry can be initialised in an existing directory by first navigating to the directory then using the poetry init function. cd project-directory poetry init This will create poetry.lock and pyproject.toml files in the directory.","title":"Initialising a Poetry Environment"},{"location":"poetry_overview/#installing-packages","text":"Poetry packages are install using the poetry add function. For example. $ poetry add package-name Packages are installed to poetries cache directory. The directory path can be found using the poetry env info --path function.","title":"Installing Packages"},{"location":"poetry_overview/#removing-packages","text":"To remove a package, use the following function: $ poetry remove package-name","title":"Removing Packages"},{"location":"poetry_overview/#removing-a-virtual-environment","text":"Poetry environments can be removed from within the project directory using the following comman: $ poetry env remove <environmentname> Note that the poetry virtual environment name is usually not the name of the project or project directory. To find the name of the virtual environment use the poetry env info --path function. This will give you the path to the virtual environment. The final directory in the path is the virtual environment name.","title":"Removing a Virtual Environment"}]}